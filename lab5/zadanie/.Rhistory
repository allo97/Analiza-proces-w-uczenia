## It is positive class
trainTask <- makeClassifTask(data = cd_train,target = "Loan_Status", positive = "Y")
## Normalize Data
#normalize the variables
trainTask <- normalizeFeatures(trainTask,method = "standardize")
testTask <- normalizeFeatures(testTask,method = "standardize")
## Remove not required variables
trainTask <- dropFeatures(task = trainTask,features = c("Loan_ID","Married.dummy"))
#Feature importance, check which variable are important
im_feat <- generateFilterValuesData(trainTask, method = c("information.gain"))
plotFilterValues(im_feat,n.show = 20)
im_feat <- generateFilterValuesData(trainTask, method = c("chi.squared"))
plotFilterValues(im_feat,n.show = 20)
## 1. Quadratic Discriminant Anaysis
#load qda
qda.learner <- makeLearner("classif.qda", predict.type = "response")
#train model
qmodel <- train(qda.learner, trainTask)
#predict on test data
qpredict <- predict(qmodel, testTask)
#create submission file
submit <- data.frame(Loan_ID = test$Loan_ID, Loan_Status = qpredict$data$response)
## 2. Logistic Regression
logistic.learner <- makeLearner("classif.logreg",predict.type = "response")
#cross validation (cv) accuracy
cv.logistic <- crossval(learner = logistic.learner,task = trainTask,iters = 3,stratify = TRUE,measures = acc,show.info = F)
#cross validation accuracy
cv.logistic$aggr
#acc.test.mean
#0.7947553
#train model
fmodel <- train(logistic.learner,trainTask)
getLearnerModel(fmodel)
#predict on test data
fpmodel <- predict(fmodel, testTask)
#create submission file
submit <- data.frame(Loan_ID = test$Loan_ID, Loan_Status = fpmodel$data$response)
View(cd_train)
summarizeColumns(cd_train)
summarizeColumns(cd_test)
View(trainTask)
View(trainTask[["env"]][["data"]])
summarizeColumns(smartphones)
## For classification the target column has to be a factor.
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
summarizeColumns(smartphones)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow")
classif.task
regr.task = makeRegrTask(id = "smartphones ocena klientow regresja",  data = smartphones, target = "ocena_klientow")
regr.task
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
View(smartphones)
# Ocena klientow, pakiet mlr
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(4.8, 4.6, 4.7, 4.7, 4.7, 4.8, 4.8, 4.7, 4.9, 4.8, 4.7)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
View(smartphones)
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
View(smartphones)
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
View(smartphones)
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
View(smartphones)
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
View(smartphones)
View(smartphones)
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "smartphones ocena klientow regresja",  data = smartphones, target = "ocena_klientow")
regr.task
listLearners(obj = "regr")
listLearners(obj = "regr")[1:6, c(3:4)]
listLearners("classif")[c("class", "package")]
listLearners("regr")[c("class", "package")]
listLearners("classif")[c("class", "package")]
# Ocena klientow, pakiet mlr
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(4.8, 4.6, 4.7, 4.7, 4.7, 4.8, 4.8, 4.7, 4.9, 4.8, 4.7)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
View(smartphones)
rdesc = makeResampleDesc(method = "CV", stratify = TRUE)
# Ocena klientow, pakiet mlr
library(mlr)
rdesc = makeResampleDesc(method = "CV", stratify = TRUE)
View(rdesc)
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow")
classif.task
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "qda", "rpart"), type = "classif")
View(classif.learners)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "smartphones ocena klientow regresja",  data = smartphones, target = "ocena_klientow")
regr.task
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "cforest"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
install.packages("party")
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "cforest"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow", fixup.data = "no")
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
View(smartphones)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow", fixup.data = "no")
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
rdesc = "cv5"
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
rdesc = makeResampleDesc(method = "CV5", stratify = TRUE)
rdesc = makeResampleDesc(method = "LOO", stratify = TRUE)
rdesc = makeResampleDesc(method = "RepCV", stratify = TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow", fixup.data = "no")
View(classif.task)
View(classif.task)
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "qda", "rpart"), type = "classif", fix.factors.prediction=TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
View(smartphones)
rdesc = makeResampleDesc(method = "CV", iters = 3, stratify = TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
rdesc = makeResampleDesc(method = "CV", stratify = F)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
classif.comparison
getBMRAggrPerformances(classif.comparison)
getBMRPerformances(classif.comparison)
plotBMRBoxplots(classif.comparison)
listLearners("classif")[c("class", "package")]
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "c50", "rpart"), type = "classif", fix.factors.prediction=TRUE)
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "C50", "rpart"), type = "classif", fix.factors.prediction=TRUE)
View(classif.learners)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
View(classif.comparison)
rdesc = makeResampleDesc(method = "CV", stratify = T)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
classif.comparison
getBMRAggrPerformances(classif.comparison)
getBMRPerformances(classif.comparison)
plotBMRBoxplots(classif.comparison)
View(smartphones)
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "smartphones ocena klientow regresja",  data = smartphones, target = "ocena_klientow")
regr.task
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "cforest"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
rdesc = makeResampleDesc(method = "CV", stratify = F)
rdesc = makeResampleDesc(method = "CV", stratify = F)
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "cforest"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
listLearners("regr")[c("class", "package")]
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
View(smartphones)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
classif.task = makeClassifTask(id = "smartphones - ocena klientow", data = smartphones, target = "ocena_klientow", fixup.data = "no")
classif.task
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "C50", "rpart"), type = "classif", fix.factors.prediction=TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
classif.comparison
getBMRAggrPerformances(classif.comparison)
getBMRPerformances(classif.comparison)
plotBMRBoxplots(classif.comparison)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE CLASSIF TASK############################################################################################################
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
classif.task = makeClassifTask(id = "smartphones - ocena klientow - MMCE", data = smartphones, target = "ocena_klientow", fixup.data = "no")
classif.task
#listLearners("classif")[c("class", "package")]
## Default values
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "C50", "rpart"), type = "classif", fix.factors.prediction=TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
## Results for classif, MMCE - Mean misclassification error
classif.comparison
getBMRAggrPerformances(classif.comparison)
getBMRPerformances(classif.comparison)
plotBMRBoxplots(classif.comparison)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE CLASSIF TASK############################################################################################################
smartphones$ocena_klientow <- as.factor(smartphones$ocena_klientow)
classif.task = makeClassifTask(id = "smartphones - ocena klientow - MMCE", data = smartphones, target = "ocena_klientow", fixup.data = "no")
classif.task
#listLearners("classif")[c("class", "package")]
## Default values
classif.learners = makeLearners(c("nnet", "lda", "randomForest", "C50", "rpart"), type = "classif", fix.factors.prediction=TRUE)
classif.comparison = benchmark(learners = classif.learners, tasks = classif.task, resamplings = rdesc)
## Results for classif, MMCE - Mean misclassification error
classif.comparison
getBMRAggrPerformances(classif.comparison)
getBMRPerformances(classif.comparison)
plotBMRBoxplots(classif.comparison)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
# Drzewo decyzyjne rpart Iris
library(magrittr)
library(tidyverse)
data(iris)
library(rpart)
model <- rpart(Species ~., data = iris)
par(xpd = NA)
library(rpart.plot)
rpart.plot(model)
newdata <- data.frame(
Sepal.Length = 6.5, Sepal.Width = 3.0,
Petal.Length = 5.2, Petal.Width = 2.0
)
model %>% predict(newdata, "class")
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
plot(mod1)
summary(mod1)
plot(mod1)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
plot(mod1)
summary(mod1)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
plot(mod1)
summary(mod1)
data(iris)
iris = data(iris)
View(mod1)
View(mod1)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
library(datasets)
data(iris)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
library(datasets)
data(iris)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
plot(mod1)
summary(mod1)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
library(C50)
plot(mod1)
summary(mod1)
data(iris)
mod1 <- C5.0(Species ~ ., data = iris, rules = F)
library(C50)
plot(mod1)
summary(mod1)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
data(iris)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
library(C50)
plot(mod1)
summary(mod1)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
data(iris)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
library(C50)
plot(mod1)
summary(mod1)
# Drzewo decyzyjne rpart Iris
library(magrittr)
library(tidyverse)
data(iris)
library(rpart)
model <- rpart(Species ~., data = iris)
par(xpd = NA)
library(rpart.plot)
rpart.plot(model)
newdata <- data.frame(
Sepal.Length = 6.5, Sepal.Width = 3.0,
Petal.Length = 5.2, Petal.Width = 2.0
)
model %>% predict(newdata, "class")
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
# Drzewo decyzyjne rpart Iris
library(magrittr)
library(tidyverse)
data(iris)
library(rpart)
model <- rpart(Species ~., data = iris)
par(xpd = NA)
library(rpart.plot)
rpart.plot(model)
newdata <- data.frame(
Sepal.Length = 6.5, Sepal.Width = 3.0,
Petal.Length = 5.2, Petal.Width = 2.0
)
model %>% predict(newdata, "class")
View(iris)
# Reguły klasyfikacyjne C5.0 Iris
library(C50)
data(iris)
mod1 <- C5.0(Species ~ ., data = iris, rules = TRUE)
library(C50)
plot(mod1)
summary(mod1)
# Ocena klientow, pakiet mlr
library(mlr)
# Data of 11 Samsung Smartphones
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite",
"Samsung Galaxy Note10 Lite","Samsung Galaxy A20e")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7, 5.8)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6, 3)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128, 32)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12, 13)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649, 749)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8, 42)
ocena_klientow <- c(3, 1, 2, 2, 2, 3, 3, 2, 4, 3, 2)
# Uwzględnia wyswietlacz, RAM, pamiec wbudowana, aparat i opinie
smartphones <- data.frame(wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, ocena_klientow)
## MAKE RESAMPLING STRATEGY
rdesc = makeResampleDesc(method = "CV", stratify = F)
#MAKE REGR TASK##############################################################################################################
smartphones$ocena_klientow <- as.numeric(smartphones$ocena_klientow)
regr.task = makeRegrTask(id = "Smartphones ocena klientow MSE",  data = smartphones, target = "ocena_klientow")
regr.task
#listLearners("regr")[c("class", "package")]
#Default values
regr.learners = makeLearners(c("lm", "randomForest", "nnet", "ctree", "rpart"), type = "regr")
regr.comparison = benchmark(learners = regr.learners, tasks = regr.task, resamplings = rdesc)
## Results for regr
regr.comparison
getBMRAggrPerformances(regr.comparison)
getBMRPerformances(regr.comparison)
plotBMRBoxplots(regr.comparison)
View(smartphones)
