library("neuralnet")
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, cena, liczba_opinii)
View(traininginput)
save(traininginput, file="smartphones.Rda")
traininginput<- data.frame(traininginput[,-1], row.nazwa=traininginput[,1])
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, cena, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
library("neuralnet")
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, cena, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
save(traininginput, file="smartphones.Rda")
maxs <- apply(traininginput[ ,1:6], 2, max)
mins <- apply(traininginput[ ,1:6], 2, min)
scaled.traininginput <- as.data.frame(scale(traininginput[,1:6], center = mins, scale = maxs-mins))
View(scaled.traininginput)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
save(traininginput, file="smartphones.Rda")
trainingoutput <- cena
# Normalizacja danych
maxs <- apply(traininginput[ ,1:6], 2, max)
mins <- apply(traininginput[ ,1:6], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:6], center = mins, scale = maxs-mins))
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
save(traininginput, file="smartphones.Rda")
trainingoutput <- cena
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:6], center = mins, scale = maxs-mins))
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
save(traininginput, file="smartphones.Rda")
trainingoutput <- cena
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, cena, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
save(traininginput, file="smartphones_with_price.Rda")
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
trainingoutput <- cena
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
trainingdata <- cbind(scaled.traininginput, trainingoutput)
View(trainingdata)
print(head(trainingdata,2))
View(trainingdata)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
feats <- names(trainingdata)
# Concatenate strings
f <- paste(feats,collapse=' + ')
f <- paste('cena ~',f)
# Convert to formula
f <- as.formula(f)
print(f)
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
print(f)
smartphones.price <- neuralnet(f, trainingdata, hidden = c(3,2), threshold = 0.01)
print(smartphones.price)
# plot the neural network
plot(net.price)
plot(smartphones.price)
View(smartphones.price)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5), linear.output = FALSE)
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5), linear.output = FALSE)
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5), linear.output = FALSE)
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
View(smartphones.price)
View(traininginput)
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
# print(smartphones.price)
# plot the neural network
plot(smartphones.price)
View(smartphones.price)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(traininginput, cena)
# Normalizacja danych
maxs <- apply(trainingdata[ ,1:6], 2, max)
mins <- apply(trainingdata[ ,1:6], 2, min)
# skalowanie
trainingdata<- as.data.frame(scale(trainingdata[,1:6], center = mins, scale = maxs-mins))
print(head(trainingdata,2))
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
# print(smartphones.price)
# plot the neural network
plot(smartphones.price)
testdata <- data.frame(c(5.8, 6, 64, 48, 50))
scaled.testdata <- as.data.frame(scale(testdata[,1:2], center = mins, scale = maxs-mins))
net.results <- compute(net.price, scaled.testdata)
ls(net.results)
print(net.results$net.result)
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
net.results <- compute(net.price, scaled.testdata)
ls(net.results)
print(net.results$net.result)
View(testdata)
testdata <- as.data.frame(matrix(c(5.8, 6, 64, 48, 50), nrow=1,ncol=5))
View(testdata)
testdata <- as.data.frame(matrix(c(5.8, 6, 64, 48, 50), nrow=1,ncol=5))
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
net.results <- compute(net.price, scaled.testdata)
ls(net.results)
print(net.results$net.result)
testdata <- as.data.frame(matrix(c(5.8, 6, 64, 48, 50), nrow=1,ncol=5))
maxs <- apply(testdata[ ,1:5], 2, max)
mins <- apply(testdata[ ,1:5], 2, min)
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
net.results <- compute(net.price, scaled.testdata)
ls(net.results)
print(net.results$net.result)
# test the neural network on some training data
testdata <- as.data.frame(matrix(c(5.8, 6, 64, 48, 50), nrow=1,ncol=5))
maxs <- apply(testdata[ ,1:5], 2, max)
mins <- apply(testdata[ ,1:5], 2, min)
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
smartphones.results <- compute(smartphones.price, scaled.testdata)
ls(smartphones.results)
print(smartphones.results$smartphones.result)
testdata <- as.data.frame(matrix(c(5, 6, 64, 48, 50), nrow=1, ncol=5))
View(testdata)
testdata <- as.data.frame(matrix(c(5, 6, 64, 48, 50), nrow=1, ncol=5))
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
net.results <- compute(net.price, scaled.testdata)
ls(net.results)
print(net.results$net.result)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
# za duzy error powstaje, nie wiem dlaczego
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
# test the neural network on some training data
testdata <- as.data.frame(matrix(c(5, 6, 64, 48, 50), nrow=1, ncol=5))
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
smartphones.results <- compute(smartphones.price, scaled.testdata)
ls(smartphones.results)
print(smartphones.results$smartphones.result)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
# za duzy error powstaje, nie wiem dlaczego
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
# test the neural network on some training data
testdata <- as.data.frame(matrix(c(5, 6, 64, 48, 50), nrow=1, ncol=5))
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
smartphones.results <- compute(smartphones.price, scaled.testdata)
ls(smartphones.results)
print(smartphones.results$smartphones.result)
library("neuralnet")
# Prognozowanie ceny smartphonow
# Error < 100zl
# Generate training data
nazwa <- c("Samsung Galaxy S20","Samsung Galaxy A71","Samsung Galaxy A40","Samsung Galaxy A30s","Samsung Galaxy A70",
"Samsung Galaxy A51","Samsung Galaxy S10","Samsung Galaxy A10","Samsung Galaxy S10 Lite","Samsung Galaxy Note10 Lite")
wyswietlacz <-c(6.7,6.7,5.9,6.4,6.7,6.5,6.1,6.2,6.7,6.7)
pamiec_RAM <-c(8,6,4,4,6,4,8,2,8,6)
pamiec_wbudowana <-c(128,128,64,64,128,128,128,32,128, 128)
aparat_foto <-c(64,64,16,25,32,48,16,13,48,12)
cena <-c(3949, 1999, 999, 849,1499, 1699, 3299,699,2799,2649)
liczba_opinii <-c(7,38,20,21,65,20,77,22,10,8)
traininginput <- data.frame(nazwa, wyswietlacz, pamiec_RAM, pamiec_wbudowana, aparat_foto, liczba_opinii)
row.names(traininginput) <- traininginput$nazwa
traininginput[1] <- NULL
# Normalizacja danych
maxs <- apply(traininginput[ ,1:5], 2, max)
mins <- apply(traininginput[ ,1:5], 2, min)
# skalowanie
scaled.traininginput <- as.data.frame(scale(traininginput[,1:5], center = mins, scale = maxs-mins))
# polaczenie danych wejściowych i wyjściowych
trainingdata <- cbind(scaled.traininginput, cena)
print(head(trainingdata,2))
# Train the neural network
# c(3,2) hidden layers
# Convert to formula
f <- as.formula("cena ~ wyswietlacz + pamiec_RAM + pamiec_wbudowana + aparat_foto + liczba_opinii")
print(f)
# za duzy error powstaje, nie wiem dlaczego
smartphones.price <- neuralnet(f, trainingdata, hidden = c(5,5,5))
print(smartphones.price)
# plot the neural network
plot(smartphones.price)
# test the neural network on some training data
testdata <- as.data.frame(matrix(c(5, 6, 64, 48, 50), nrow=1, ncol=5))
scaled.testdata <- as.data.frame(scale(testdata[,1:5], center = mins, scale = maxs-mins))
smartphones.results <- compute(smartphones.price, scaled.testdata)
ls(smartphones.results)
print(smartphones.results$smartphones.result)
